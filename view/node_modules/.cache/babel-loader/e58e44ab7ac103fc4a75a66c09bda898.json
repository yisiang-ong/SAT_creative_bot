{"ast":null,"code":"import axios from 'axios'; // ActionProvider starter code\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc, createClientMessage) {\n    this.askForPassword = username => {\n      this.setState(state => ({ ...state,\n        username: username\n      }));\n      const messages = this.createChatBotMessage(\"Please enter your password:\", {\n        withAvatar: true\n      });\n      this.addMessageToBotState(messages);\n    };\n\n    this.updateUserID = async (username, password) => {\n      this.setState(state => ({ ...state,\n        password: password\n      })); // URL to use for AWS (Axios requests)\n      // const uri = `/api/login`\n      // URL to use for local requests\n\n      const uri = `http://localhost:5000/api/login`;\n      let user_info = {\n        username: username,\n        password: password\n      };\n      const response = await axios.post(uri, {\n        user_info\n      }); // dataReceived format: {validID : bool, userID: string}\n\n      let dataReceived = response.data;\n\n      if (!dataReceived.validID) {\n        let message = this.createChatBotMessage(\"The user ID and password combination is not valid. Please enter user ID again.\", {\n          withAvatar: true\n        });\n        this.addMessageToBotState(message);\n        let user_id_message = this.createChatBotMessage(\"What is your user ID?\", {\n          withAvatar: true\n        });\n        this.addMessageToBotState(user_id_message);\n        this.setState(state => ({ ...state,\n          username: null,\n          password: null\n        }));\n      } else {\n        let model_prompt = dataReceived.model_prompt;\n        this.setState(state => ({ ...state,\n          userState: dataReceived.userID,\n          inputType: dataReceived.choices,\n          sessionID: dataReceived.sessionID\n        }));\n        let message = this.createChatBotMessage(\"The password is valid. Welcome.\", {\n          withAvatar: true\n        }); // Opening prompt -> open text\n\n        this.addMessageToBotState(message);\n        message = this.createChatBotMessage(model_prompt, {\n          withAvatar: true\n        });\n        this.addMessageToBotState(message);\n      }\n    };\n\n    this.sendRequest = async choice_info => {\n      // URL to use for AWS (Axios requests)\n      // const uri = `/api/update_session`\n      // URL to use for local requests\n      const uri = `http://localhost:5000/api/update_session`;\n      const response = await axios.post(uri, {\n        choice_info\n      });\n      this.handleReceivedData(response.data);\n    };\n\n    this.handleReceivedData = dataReceived => {\n      // dataReceived = {\n      //   chatbot_response: \"This is the chatbot message to display\",\n      //   user_options: options to map to expected buttons below\n      // }\n      // const LoadingMessageIcon = () => {\n      //   return (\n      //     <div className=\"chatbot-loader-container\">\n      //       <svg\n      //         id=\"dots\"\n      //         width=\"50px\"\n      //         height=\"21px\"\n      //         viewBox=\"0 0 132 58\"\n      //         version=\"1.1\"\n      //         xmlns=\"http://www.w3.org/2000/svg\"\n      //       >\n      //         <g stroke=\"none\" fill=\"none\">\n      //           <g id=\"chatbot-loader\" fill=\"#fff\">\n      //             <circle id=\"chatbot-loader-dot1\" cx=\"25\" cy=\"30\" r=\"13\"></circle>\n      //             <circle id=\"chatbot-loader-dot2\" cx=\"65\" cy=\"30\" r=\"13\"></circle>\n      //             <circle id=\"chatbot-loader-dot3\" cx=\"105\" cy=\"30\" r=\"13\"></circle>\n      //           </g>\n      //         </g>\n      //       </svg>\n      //     </div>\n      //   )\n      // }\n      const userOptions = dataReceived.user_options; // default optionstoshow is nothing\n\n      let optionsToShow = null; //  Required options: null or \"YesNo\" or \"Continue\" or \"Feedback\" or \"Emotion\"}\n\n      if (userOptions.length === 1 && (userOptions[0] === \"open_text\" || userOptions[0] === \"any\")) {\n        optionsToShow = null;\n      } else if (userOptions.length === 1 && userOptions[0] === \"continue\") {\n        optionsToShow = \"Continue\";\n      } else if (userOptions.length === 2 && userOptions[0] === \"yes\" && userOptions[1] === \"no\") {\n        optionsToShow = \"YesNo\"; // } else if (userOptions.length === 2 && userOptions[0] === \"yes, i would like to try one of these protocols\" && userOptions[1] === \"no, i would like to try something else\") {\n        //   optionsToShow = \"YesNoProtocols\"\n        // } else if (userOptions.length === 2 && userOptions[0] === \"recent\" && userOptions[1] === \"distant\") {\n        //   optionsToShow = \"RecentDistant\"\n      } else if (userOptions.length === 4 && userOptions[0] === \"sad\" && userOptions[1] === \"angry\" && userOptions[2] === \"anxious\" && userOptions[3] === \"happy\") {\n        optionsToShow = \"Emotion\"; // } else if (userOptions.length === 3 && userOptions[0] === \"better\" && userOptions[1] === \"worse\" && userOptions[2] === \"no change\") {\n        //   optionsToShow = \"Feedback\"\n      } else if (userOptions.length === 3 && userOptions[0] === \"enhance_creativity\" && userOptions[1] === \"evaluate_creativity\" && userOptions[2] === \"sat_protocols\") {\n        optionsToShow = \"FeelDoing\";\n      } else {\n        // Protocol case\n        optionsToShow = \"Protocol\";\n        this.setState(state => ({ ...state,\n          protocols: userOptions,\n          askingForProtocol: true\n        }));\n      }\n\n      this.setState(state => ({ ...state,\n        currentOptionToShow: optionsToShow\n      })); // Responses are either strings or list of strings\n\n      if (typeof dataReceived.chatbot_response === \"string\") {\n        const messages = this.createChatBotMessage(dataReceived.chatbot_response, {\n          withAvatar: true,\n          widget: optionsToShow\n        });\n        this.addMessageToBotState(messages);\n      } else {\n        // its a list of strings such as suggestions for protocols \n        for (let i = 0; i < dataReceived.chatbot_response.length; i++) {\n          let widget = null; // Shows options after last message\n\n          if (i === dataReceived.chatbot_response.length - 1) {\n            widget = optionsToShow;\n          }\n\n          const message_to_add = this.createChatBotMessage(dataReceived.chatbot_response[i], {\n            withAvatar: true,\n            widget: widget\n          });\n          this.addMessageToBotState(message_to_add);\n        }\n      }\n    };\n\n    this.handleButtonsEmotion = (userID, sessionID, userInput, userInputType) => {\n      let inputToSend = userInput;\n      let message = this.createClientMessage(userInput);\n      this.addMessageToBotState(message); // // Ignores input type above and manually defines; other cases will need an if check for this\n      // let input_type = [\"sad\", \"angry\", \"anxious\", \"happy\"]\n\n      const dataToSend = {\n        user_id: userID,\n        session_id: sessionID,\n        user_choice: inputToSend,\n        input_type: userInputType\n      };\n      this.sendRequest(dataToSend);\n    };\n\n    this.handleButtons = (userID, sessionID, userInput, userInputType) => {\n      let message = this.createClientMessage(userInput);\n      this.addMessageToBotState(message);\n      const dataToSend = {\n        user_id: userID,\n        session_id: sessionID,\n        user_choice: userInput,\n        input_type: userInputType\n      };\n      return this.sendRequest(dataToSend);\n    };\n\n    this.askForProtocol = () => {\n      let message = \"Please type a protocol number (1-20), using the workshops to help you.\";\n      this.addMessageToBotState(message);\n      this.setState(state => ({ ...state,\n        askingForProtocol: true\n      }));\n    };\n\n    this.stopAskingForProtocol = () => {\n      this.setState(state => ({ ...state,\n        askingForProtocol: false\n      }));\n    };\n\n    this.askForDichotomy = () => {\n      let message = \"Please type a dichotomy number (1-10), using the workshops to help you.\";\n      this.addMessageToBotState(message);\n      this.setState(state => ({ ...state,\n        askingForDichotomy: true\n      }));\n    };\n\n    this.stopAskingForDichotomy = () => {\n      this.setState(state => ({ ...state,\n        askingForDichotomy: false\n      }));\n    };\n\n    this.copyLastMessage = () => {\n      this.setState(state => ({ ...state,\n        messages: [...state.messages, state.messages[state.messages.length - 2]]\n      }));\n    };\n\n    this.addMessageToBotState = message => {\n      this.setState(state => ({ ...state,\n        messages: [...state.messages, message]\n      }));\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    this.createClientMessage = createClientMessage;\n  } // Asks for password after storing username\n\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["C:/Users/yisiang/OneDrive/Desktop/MSc AI/007 MSC AI Individual/SATbot3.0/view/src/ActionProvider.js"],"names":["axios","ActionProvider","constructor","createChatBotMessage","setStateFunc","createClientMessage","askForPassword","username","setState","state","messages","withAvatar","addMessageToBotState","updateUserID","password","uri","user_info","response","post","dataReceived","data","validID","message","user_id_message","model_prompt","userState","userID","inputType","choices","sessionID","sendRequest","choice_info","handleReceivedData","userOptions","user_options","optionsToShow","length","protocols","askingForProtocol","currentOptionToShow","chatbot_response","widget","i","message_to_add","handleButtonsEmotion","userInput","userInputType","inputToSend","dataToSend","user_id","session_id","user_choice","input_type","handleButtons","askForProtocol","stopAskingForProtocol","askForDichotomy","askingForDichotomy","stopAskingForDichotomy","copyLastMessage"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n// ActionProvider starter code\r\nclass ActionProvider {\r\n  \r\n  \r\n  constructor(createChatBotMessage, setStateFunc, createClientMessage) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n    this.createClientMessage = createClientMessage;\r\n  }\r\n\r\n\r\n  // Asks for password after storing username\r\n  askForPassword = (username) => {\r\n    this.setState((state) => ({\r\n      ...state,\r\n      username: username,\r\n    }));\r\n    const messages = this.createChatBotMessage(\r\n      \"Please enter your password:\",\r\n      {\r\n        withAvatar: true,\r\n      }\r\n    );\r\n\r\n    this.addMessageToBotState(messages);\r\n  }\r\n\r\n  // Checking for ID with a request\r\n  updateUserID = async (username, password) => {\r\n\r\n    this.setState((state) => ({\r\n      ...state,\r\n      password: password,\r\n    }));\r\n\r\n    // URL to use for AWS (Axios requests)\r\n    // const uri = `/api/login`\r\n\r\n    // URL to use for local requests\r\n    const uri = `http://localhost:5000/api/login`\r\n    let user_info = {\r\n      username: username,\r\n      password: password\r\n    };\r\n\r\n    const response = await axios.post(uri, {\r\n      user_info\r\n    })\r\n\r\n    // dataReceived format: {validID : bool, userID: string}\r\n    let dataReceived = response.data\r\n    if (!dataReceived.validID) {\r\n      let message = this.createChatBotMessage(\r\n        \"The user ID and password combination is not valid. Please enter user ID again.\",\r\n        {\r\n          withAvatar: true,\r\n        });\r\n      this.addMessageToBotState(message);\r\n      let user_id_message = this.createChatBotMessage(\"What is your user ID?\",\r\n        { withAvatar: true }\r\n      );\r\n      this.addMessageToBotState(user_id_message)\r\n      this.setState((state) => ({\r\n        ...state,\r\n        username: null,\r\n        password: null\r\n      }));\r\n\r\n    } else {\r\n      let model_prompt = dataReceived.model_prompt\r\n      this.setState((state) => ({ ...state, userState: dataReceived.userID, inputType: dataReceived.choices, sessionID: dataReceived.sessionID }));\r\n      let message = this.createChatBotMessage(\"The password is valid. Welcome.\", {\r\n        withAvatar: true,\r\n      });\r\n\r\n      // Opening prompt -> open text\r\n      this.addMessageToBotState(message);\r\n      message = this.createChatBotMessage(model_prompt, {\r\n        withAvatar: true,\r\n      });\r\n      this.addMessageToBotState(message);\r\n    }\r\n\r\n  };\r\n\r\n  // Send API request\r\n  sendRequest = async (choice_info) => {\r\n    // URL to use for AWS (Axios requests)\r\n    // const uri = `/api/update_session`\r\n\r\n    // URL to use for local requests\r\n    const uri = `http://localhost:5000/api/update_session`;\r\n    const response = await axios.post(uri, {\r\n      choice_info\r\n    })\r\n\r\n    this.handleReceivedData(response.data);\r\n  };\r\n\r\n  handleReceivedData = (dataReceived) => {\r\n    // dataReceived = {\r\n    //   chatbot_response: \"This is the chatbot message to display\",\r\n    //   user_options: options to map to expected buttons below\r\n    // }\r\n\r\n    // const LoadingMessageIcon = () => {\r\n    //   return (\r\n    //     <div className=\"chatbot-loader-container\">\r\n    //       <svg\r\n    //         id=\"dots\"\r\n    //         width=\"50px\"\r\n    //         height=\"21px\"\r\n    //         viewBox=\"0 0 132 58\"\r\n    //         version=\"1.1\"\r\n    //         xmlns=\"http://www.w3.org/2000/svg\"\r\n    //       >\r\n    //         <g stroke=\"none\" fill=\"none\">\r\n    //           <g id=\"chatbot-loader\" fill=\"#fff\">\r\n    //             <circle id=\"chatbot-loader-dot1\" cx=\"25\" cy=\"30\" r=\"13\"></circle>\r\n    //             <circle id=\"chatbot-loader-dot2\" cx=\"65\" cy=\"30\" r=\"13\"></circle>\r\n    //             <circle id=\"chatbot-loader-dot3\" cx=\"105\" cy=\"30\" r=\"13\"></circle>\r\n    //           </g>\r\n    //         </g>\r\n    //       </svg>\r\n    //     </div>\r\n    //   )\r\n    // }\r\n\r\n    const userOptions = dataReceived.user_options\r\n    // default optionstoshow is nothing\r\n    let optionsToShow = null;\r\n\r\n\r\n    //  Required options: null or \"YesNo\" or \"Continue\" or \"Feedback\" or \"Emotion\"}\r\n    if (userOptions.length === 1 && (userOptions[0] === \"open_text\" || userOptions[0] === \"any\")) {\r\n      optionsToShow = null;\r\n    } else if (userOptions.length === 1 && userOptions[0] === \"continue\") {\r\n      optionsToShow = \"Continue\"\r\n    } else if (userOptions.length === 2 && userOptions[0] === \"yes\" && userOptions[1] === \"no\") {\r\n      optionsToShow = \"YesNo\"\r\n    // } else if (userOptions.length === 2 && userOptions[0] === \"yes, i would like to try one of these protocols\" && userOptions[1] === \"no, i would like to try something else\") {\r\n    //   optionsToShow = \"YesNoProtocols\"\r\n    // } else if (userOptions.length === 2 && userOptions[0] === \"recent\" && userOptions[1] === \"distant\") {\r\n    //   optionsToShow = \"RecentDistant\"\r\n    } else if (userOptions.length === 4 && userOptions[0] === \"sad\" && userOptions[1] === \"angry\" && userOptions[2] === \"anxious\" && userOptions[3] === \"happy\") {\r\n      optionsToShow = \"Emotion\"\r\n    // } else if (userOptions.length === 3 && userOptions[0] === \"better\" && userOptions[1] === \"worse\" && userOptions[2] === \"no change\") {\r\n    //   optionsToShow = \"Feedback\"\r\n    } else if (userOptions.length === 3 && userOptions[0] === \"enhance_creativity\" && userOptions[1] === \"evaluate_creativity\" && userOptions[2] === \"sat_protocols\") {\r\n      optionsToShow = \"FeelDoing\"\r\n    \r\n    } else {\r\n      // Protocol case\r\n      optionsToShow = \"Protocol\"\r\n      this.setState((state) => ({\r\n        ...state,\r\n        protocols: userOptions,\r\n        askingForProtocol: true\r\n      }));\r\n    }\r\n    this.setState((state) => ({\r\n      ...state,\r\n      currentOptionToShow: optionsToShow,\r\n    }));\r\n\r\n    // Responses are either strings or list of strings\r\n\r\n    if (typeof dataReceived.chatbot_response === \"string\") {\r\n      const messages = this.createChatBotMessage(dataReceived.chatbot_response, {\r\n        withAvatar: true,\r\n        widget: optionsToShow,\r\n      });\r\n      this.addMessageToBotState(messages);\r\n    } else {\r\n    // its a list of strings such as suggestions for protocols \r\n      for (let i = 0; i < dataReceived.chatbot_response.length; i++) {\r\n        let widget = null;\r\n        // Shows options after last message\r\n        if (i === dataReceived.chatbot_response.length - 1) {\r\n          widget = optionsToShow;\r\n        }\r\n        const message_to_add = this.createChatBotMessage(dataReceived.chatbot_response[i], {\r\n          withAvatar: true,\r\n          widget: widget,\r\n        });\r\n        this.addMessageToBotState(message_to_add);\r\n\r\n      }\r\n\r\n    }\r\n  };\r\n\r\n  handleButtonsEmotion = (userID, sessionID, userInput, userInputType) => {\r\n    let inputToSend = userInput;\r\n    let message = this.createClientMessage(userInput);\r\n    this.addMessageToBotState(message);\r\n\r\n\r\n    // // Ignores input type above and manually defines; other cases will need an if check for this\r\n    // let input_type = [\"sad\", \"angry\", \"anxious\", \"happy\"]\r\n    const dataToSend = {\r\n      user_id: userID,\r\n      session_id: sessionID,\r\n      user_choice: inputToSend,\r\n      input_type: userInputType,\r\n    };\r\n    this.sendRequest(dataToSend);\r\n  }\r\n\r\n  handleButtons = (userID, sessionID, userInput, userInputType) => {\r\n    let message = this.createClientMessage(userInput);\r\n    this.addMessageToBotState(message);\r\n\r\n    const dataToSend = {\r\n      user_id: userID,\r\n      session_id: sessionID,\r\n      user_choice: userInput,\r\n      input_type: userInputType,\r\n    };\r\n    return this.sendRequest(dataToSend);\r\n  };\r\n\r\n  askForProtocol = () => {\r\n    let message = \"Please type a protocol number (1-20), using the workshops to help you.\"\r\n    this.addMessageToBotState(message);\r\n    this.setState((state) => ({\r\n      ...state,\r\n      askingForProtocol: true,\r\n    }))\r\n  }\r\n\r\n  stopAskingForProtocol = () => {\r\n    this.setState((state) => ({\r\n      ...state,\r\n      askingForProtocol: false,\r\n    }))\r\n  }\r\n\r\n  askForDichotomy = () => {\r\n    let message = \"Please type a dichotomy number (1-10), using the workshops to help you.\"\r\n    this.addMessageToBotState(message);\r\n    this.setState((state) => ({\r\n      ...state,\r\n      askingForDichotomy: true,\r\n    }))\r\n  }\r\n\r\n  stopAskingForDichotomy = () => {\r\n    this.setState((state) => ({\r\n      ...state,\r\n      askingForDichotomy: false,\r\n    }))\r\n  }\r\n\r\n\r\n  // Copies last message from model\r\n  copyLastMessage = () => {\r\n    this.setState((state) => ({\r\n      ...state,\r\n      messages: [...state.messages, state.messages[state.messages.length - 2]],\r\n    }))\r\n    \r\n  }\r\n\r\n\r\n  // Add message to state\r\n  addMessageToBotState = (message) => {\r\n    this.setState((state) => ({\r\n      ...state,\r\n      messages: [...state.messages, message],\r\n    }));\r\n  };\r\n}\r\n\r\nexport default ActionProvider;\r\n"]},"metadata":{},"sourceType":"module"}