{"ast":null,"code":"// MessageParser starter code\nclass MessageParser {\n  constructor(actionProvider, state) {\n    this.actionProvider = actionProvider;\n    this.state = state;\n  } // This method is called inside the chatbot when it receives a message from the user.\n\n\n  parse(message) {\n    // Case: User has not provided id yet\n    if (this.state.username == null) {\n      return this.actionProvider.askForPassword(message);\n    } else if (this.state.password == null) {\n      return this.actionProvider.updateUserID(this.state.username, message);\n    } else if (this.state.askingForProtocol && parseInt(message) >= 1 && parseInt(message) <= 21) {\n      // if there is protocol, then the input_type is 1 to 21\n      const choice_info = {\n        user_id: this.state.userState,\n        session_id: this.state.sessionID,\n        user_choice: message,\n        input_type: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n      };\n      this.actionProvider.stopAskingForProtocol();\n      return this.actionProvider.sendRequest(choice_info);\n    } else if (this.state.askingForProtocol && (parseInt(message) < 1 || parseInt(message) > 21)) {\n      return this.actionProvider.askForProtocol();\n    } // to handle if user type the choice, change input type to protocol\n    else if (message.toLowerCase() === \"enhance creativity\" || message.toLowerCase() === \"evaluate creativity\" || message.toLowerCase() === \"sat protocols\" || message.toLowerCase() === \"yes\" || message.toLowerCase() === \"no\" || message.toLowerCase() === \"continue\" || message.toLowerCase() === \"loosening deep belief\" || message.toLowerCase() === \"switch between dichotomy\" || message.toLowerCase() === \"sublimate energy\" || message.toLowerCase() === \"dichotomy a\" || message.toLowerCase() === \"dichotomy b\") {\n        let input_type = \"Protocol\"; // console.log(input_type)\n\n        const currentOptionToShow = this.state.currentOptionToShow; // console.log(currentOptionToShow)\n        // Case: user types when they enter text instead of selecting an option\n\n        if (currentOptionToShow === \"Continue\" && message.toLowerCase() !== \"continue\" || currentOptionToShow === \"Emotion\" && message.toLowerCase() !== \"happy\" && message.toLowerCase() !== \"sad\" && message.toLowerCase() !== \"angry\" && message.toLowerCase() !== \"anxious\" || // (currentOptionToShow === \"RecentDistant\" && (message !== \"Recent\" && message !== \"Distant\")) ||\n        // (currentOptionToShow === \"Feedback\" && (message !== \"Better\" && message !== \"Worse\" && message !== \"No change\")) ||\n        currentOptionToShow === \"Protocol\" && !this.state.protocols.includes(message) || currentOptionToShow === \"YesNo\" && message.toLowerCase() !== \"yes\" && message.toLowerCase() !== \"no\" // (currentOptionToShow === \"Dichotomy\" && (!this.state.dichotomy.includes(message))) ||\n        ) {\n            // copy last message when the user does not select an option button.\n            this.actionProvider.copyLastMessage();\n          } else {\n          const choice_info = {\n            user_id: this.state.userState,\n            session_id: this.state.sessionID,\n            user_choice: message.toLowerCase(),\n            input_type: input_type\n          };\n          return this.actionProvider.sendRequest(choice_info);\n        }\n      } else {\n        let input_type = null;\n\n        if (this.state.inputType.length === 1) {\n          input_type = this.state.inputType[0];\n        } else {\n          input_type = this.state.inputType;\n        } // console.log(input_type)\n\n\n        const currentOptionToShow = this.state.currentOptionToShow; // console.log(currentOptionToShow)\n        // Case: user types when they enter text instead of selecting an option\n\n        if (currentOptionToShow === \"Continue\" && message !== \"Continue\" || currentOptionToShow === \"Emotion\" && message.toLowerCase() !== \"happy\" && message.toLowerCase() !== \"sad\" && message.toLowerCase() !== \"angry\" && message.toLowerCase() !== \"anxious\" || // (currentOptionToShow === \"RecentDistant\" && (message !== \"Recent\" && message !== \"Distant\")) ||\n        // (currentOptionToShow === \"Feedback\" && (message !== \"Better\" && message !== \"Worse\" && message !== \"No change\")) ||\n        currentOptionToShow === \"Protocol\" && !this.state.protocols.includes(message) || currentOptionToShow === \"YesNo\" && message !== \"Yes\" && message !== \"No\" // (currentOptionToShow === \"Dichotomy\" && (!this.state.dichotomy.includes(message))) ||\n        ) {\n            // copy last message when the user does not select an option button.\n            this.actionProvider.copyLastMessage();\n          } else {\n          const choice_info = {\n            user_id: this.state.userState,\n            session_id: this.state.sessionID,\n            user_choice: message.toLowerCase(),\n            input_type: input_type\n          };\n          return this.actionProvider.sendRequest(choice_info);\n        }\n      }\n  }\n\n}\n\nexport default MessageParser;","map":{"version":3,"sources":["C:/Users/yisiang/OneDrive/Desktop/MSc AI/007 MSC AI Individual/SATbot3.0/view/src/MessageParser.js"],"names":["MessageParser","constructor","actionProvider","state","parse","message","username","askForPassword","password","updateUserID","askingForProtocol","parseInt","choice_info","user_id","userState","session_id","sessionID","user_choice","input_type","stopAskingForProtocol","sendRequest","askForProtocol","toLowerCase","currentOptionToShow","protocols","includes","copyLastMessage","inputType","length"],"mappings":"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","sourcesContent":["// MessageParser starter code\r\nclass MessageParser {\r\n  constructor(actionProvider, state) {\r\n    this.actionProvider = actionProvider;\r\n    this.state = state;\r\n  }\r\n\r\n  // This method is called inside the chatbot when it receives a message from the user.\r\n  parse(message) {\r\n    // Case: User has not provided id yet\r\n    if (this.state.username == null) {\r\n      return this.actionProvider.askForPassword(message);\r\n    } else if (this.state.password == null) {\r\n      return this.actionProvider.updateUserID(this.state.username, message);\r\n    } else if (this.state.askingForProtocol && parseInt(message) >= 1 && parseInt(message) <= 21) {\r\n        // if there is protocol, then the input_type is 1 to 21\r\n      const choice_info = {\r\n        user_id: this.state.userState,\r\n        session_id: this.state.sessionID,\r\n        user_choice: message,\r\n        input_type: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\r\n      };\r\n      this.actionProvider.stopAskingForProtocol()\r\n\r\n      return this.actionProvider.sendRequest(choice_info);\r\n    } else if (this.state.askingForProtocol && (parseInt(message) < 1 || parseInt(message) > 21)) {\r\n      return this.actionProvider.askForProtocol()\r\n    } \r\n    // to handle if user type the choice, change input type to protocol\r\n    else if (message.toLowerCase() === \"enhance creativity\"  || message.toLowerCase() === \"evaluate creativity\" \r\n    || message.toLowerCase() === \"sat protocols\" || message.toLowerCase() === \"yes\" || message.toLowerCase() === \"no\" || \r\n    message.toLowerCase() === \"continue\" ||  message.toLowerCase() === \"loosening deep belief\"\r\n    || message.toLowerCase() === \"switch between dichotomy\" || message.toLowerCase() === \"sublimate energy\" ||\r\n    message.toLowerCase() === \"dichotomy a\" || message.toLowerCase() === \"dichotomy b\") {\r\n      let input_type = \"Protocol\";\r\n      // console.log(input_type)\r\n      const currentOptionToShow = this.state.currentOptionToShow\r\n      // console.log(currentOptionToShow)\r\n      // Case: user types when they enter text instead of selecting an option\r\n      if ((currentOptionToShow === \"Continue\" && message.toLowerCase() !== \"continue\") ||\r\n        (currentOptionToShow === \"Emotion\" && (message.toLowerCase() !== \"happy\" && message.toLowerCase() !== \"sad\" \r\n        && message.toLowerCase() !== \"angry\" && message.toLowerCase() !== \"anxious\")) ||\r\n        // (currentOptionToShow === \"RecentDistant\" && (message !== \"Recent\" && message !== \"Distant\")) ||\r\n        // (currentOptionToShow === \"Feedback\" && (message !== \"Better\" && message !== \"Worse\" && message !== \"No change\")) ||\r\n        (currentOptionToShow === \"Protocol\" && (!this.state.protocols.includes(message))) ||\r\n        (currentOptionToShow === \"YesNo\" && (message.toLowerCase() !== \"yes\" && message.toLowerCase() !== \"no\")) \r\n        // (currentOptionToShow === \"Dichotomy\" && (!this.state.dichotomy.includes(message))) ||\r\n      ) {\r\n        // copy last message when the user does not select an option button.\r\n        this.actionProvider.copyLastMessage()\r\n      } else {\r\n        const choice_info = {\r\n          user_id: this.state.userState,\r\n          session_id: this.state.sessionID,\r\n          user_choice: message.toLowerCase(),\r\n          input_type: input_type,\r\n        };\r\n        return this.actionProvider.sendRequest(choice_info);\r\n    }}\r\n    else {\r\n      let input_type = null;\r\n      if (this.state.inputType.length === 1) {\r\n        input_type = this.state.inputType[0]\r\n      } else {\r\n        input_type = this.state.inputType\r\n      }\r\n      // console.log(input_type)\r\n      const currentOptionToShow = this.state.currentOptionToShow\r\n      // console.log(currentOptionToShow)\r\n      // Case: user types when they enter text instead of selecting an option\r\n      if ((currentOptionToShow === \"Continue\" && message !== \"Continue\") ||\r\n        (currentOptionToShow === \"Emotion\" && (message.toLowerCase() !== \"happy\" && message.toLowerCase() !== \"sad\" && message.toLowerCase() !== \"angry\" && message.toLowerCase() !== \"anxious\")) ||\r\n        // (currentOptionToShow === \"RecentDistant\" && (message !== \"Recent\" && message !== \"Distant\")) ||\r\n        // (currentOptionToShow === \"Feedback\" && (message !== \"Better\" && message !== \"Worse\" && message !== \"No change\")) ||\r\n        (currentOptionToShow === \"Protocol\" && (!this.state.protocols.includes(message))) ||\r\n        (currentOptionToShow === \"YesNo\" && (message !== \"Yes\" && message !== \"No\"))\r\n        // (currentOptionToShow === \"Dichotomy\" && (!this.state.dichotomy.includes(message))) ||\r\n      ) {\r\n        // copy last message when the user does not select an option button.\r\n        this.actionProvider.copyLastMessage()\r\n      } else {\r\n        const choice_info = {\r\n          user_id: this.state.userState,\r\n          session_id: this.state.sessionID,\r\n          user_choice: message.toLowerCase(),\r\n          input_type: input_type,\r\n        };\r\n        return this.actionProvider.sendRequest(choice_info);\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default MessageParser;\r\n"]},"metadata":{},"sourceType":"module"}