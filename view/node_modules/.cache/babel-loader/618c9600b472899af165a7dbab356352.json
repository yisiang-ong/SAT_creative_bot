{"ast":null,"code":"// MessageParser starter code\nclass MessageParser {\n  constructor(actionProvider, state) {\n    this.actionProvider = actionProvider;\n    this.state = state;\n  } // This method is called inside the chatbot when it receives a message from the user.\n\n\n  parse(message) {\n    // Case: User has not provided id yet\n    if (this.state.username == null) {\n      return this.actionProvider.askForPassword(message);\n    } else if (this.state.password == null) {\n      return this.actionProvider.updateUserID(this.state.username, message);\n    } else if (this.state.askingForProtocol && parseInt(message) >= 1 && parseInt(message) <= 20) {\n      const choice_info = {\n        user_id: this.state.userState,\n        session_id: this.state.sessionID,\n        user_choice: message,\n        input_type: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n      };\n      this.actionProvider.stopAskingForProtocol();\n      return this.actionProvider.sendRequest(choice_info);\n    } else if (this.state.askingForProtocol && (parseInt(message) < 1 || parseInt(message) > 20)) {\n      console.log(\"this is asking your firstname\");\n      return this.actionProvider.askForProtocol();\n    } else {\n      let input_type = null;\n\n      if (this.state.inputType.length === 1) {\n        input_type = this.state.inputType[0];\n      } else {\n        input_type = this.state.inputType;\n      }\n\n      console.log(input_type);\n      const currentOptionToShow = this.state.currentOptionToShow; // Case: user types when they enter text instead of selecting an option\n\n      if (currentOptionToShow === \"Continue\" && message !== \"Continue\" || currentOptionToShow === \"Emotion\" && message !== \"Happy\" && message !== \"Sad\" && message !== \"Angry\" && message !== \"Neutral\" || currentOptionToShow === \"RecentDistant\" && message !== \"Recent\" && message !== \"Distant\" || currentOptionToShow === \"Feedback\" && message !== \"Better\" && message !== \"Worse\" && message !== \"No change\" || currentOptionToShow === \"Protocol\" && !this.state.protocols.includes(message) || currentOptionToShow === \"YesNo\" && message !== \"Yes\" && message !== \"No\") {\n        this.actionProvider.copyLastMessage();\n      } else {\n        const choice_info = {\n          user_id: this.state.userState,\n          session_id: this.state.sessionID,\n          user_choice: message,\n          input_type: input_type\n        };\n        return this.actionProvider.sendRequest(choice_info);\n      }\n    }\n  }\n\n}\n\nexport default MessageParser;","map":{"version":3,"sources":["C:/Users/yisiang/OneDrive/Desktop/MSc AI/007 MSC AI Individual/SATbot3.0/view/src/MessageParser.js"],"names":["MessageParser","constructor","actionProvider","state","parse","message","username","askForPassword","password","updateUserID","askingForProtocol","parseInt","choice_info","user_id","userState","session_id","sessionID","user_choice","input_type","stopAskingForProtocol","sendRequest","console","log","askForProtocol","inputType","length","currentOptionToShow","protocols","includes","copyLastMessage"],"mappings":"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","sourcesContent":["// MessageParser starter code\r\nclass MessageParser {\r\n  constructor(actionProvider, state) {\r\n    this.actionProvider = actionProvider;\r\n    this.state = state;\r\n  }\r\n\r\n  // This method is called inside the chatbot when it receives a message from the user.\r\n  parse(message) {\r\n    // Case: User has not provided id yet\r\n    if (this.state.username == null) {\r\n      return this.actionProvider.askForPassword(message);\r\n    } else if (this.state.password == null) {\r\n      return this.actionProvider.updateUserID(this.state.username, message);\r\n    } else if (this.state.askingForProtocol && parseInt(message) >= 1 && parseInt(message) <= 20) {\r\n      \r\n      const choice_info = {\r\n        user_id: this.state.userState,\r\n        session_id: this.state.sessionID,\r\n        user_choice: message,\r\n        input_type: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\r\n      };\r\n      this.actionProvider.stopAskingForProtocol()\r\n\r\n      return this.actionProvider.sendRequest(choice_info);\r\n    } else if (this.state.askingForProtocol && (parseInt(message) < 1 || parseInt(message) > 20)) {\r\n      console.log(\"this is asking your firstname\")\r\n      return this.actionProvider.askForProtocol()\r\n    }\r\n    else {\r\n      let input_type = null;\r\n      if (this.state.inputType.length === 1) {\r\n        input_type = this.state.inputType[0]\r\n      } else {\r\n        input_type = this.state.inputType\r\n      }\r\n      console.log(input_type)\r\n      const currentOptionToShow = this.state.currentOptionToShow\r\n      \r\n      // Case: user types when they enter text instead of selecting an option\r\n      if ((currentOptionToShow === \"Continue\" && message !== \"Continue\") ||\r\n        (currentOptionToShow === \"Emotion\" && (message !== \"Happy\" && message !== \"Sad\" && message !== \"Angry\" && message !== \"Neutral\")) ||\r\n        (currentOptionToShow === \"RecentDistant\" && (message !== \"Recent\" && message !== \"Distant\")) ||\r\n        (currentOptionToShow === \"Feedback\" && (message !== \"Better\" && message !== \"Worse\" && message !== \"No change\")) ||\r\n        (currentOptionToShow === \"Protocol\" && (!this.state.protocols.includes(message))) ||\r\n        (currentOptionToShow === \"YesNo\" && (message !== \"Yes\" && message !== \"No\"))\r\n      ) {\r\n        this.actionProvider.copyLastMessage()\r\n      } else {\r\n        const choice_info = {\r\n          user_id: this.state.userState,\r\n          session_id: this.state.sessionID,\r\n          user_choice: message,\r\n          input_type: input_type,\r\n        };\r\n        return this.actionProvider.sendRequest(choice_info);\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default MessageParser;\r\n"]},"metadata":{},"sourceType":"module"}